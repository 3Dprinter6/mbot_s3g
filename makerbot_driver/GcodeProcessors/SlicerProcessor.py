from __future__ import absolute_import
import re

from .BundleProcessor import BundleProcessor
from .LineTransformProcessor import LineTransformProcessor
from .RpmProcessor import RpmProcessor
from .CoordinateRemovalProcessor import CoordinateRemovalProcessor
from .AbpProcessor import AbpProcessor
from .ProgressProcessor import ProgressProcessor

import makerbot_driver


class SlicerProcessor(BundleProcessor):

    def __init__(self):
        super(SlicerProcessor, self).__init__()
        self.version = '0.9.3'
        self.processors = [
            RpmProcessor(),
            CoordinateRemovalProcessor(),
            AbpProcessor(),
            SlicerVersionChecker(self.version)
        ]


class SlicerVersionChecker(LineTransformProcessor):

    def __init__(self, version):
        super(SlicerVersionChecker, self).__init__()
        self.version = version
        self.version_regex = ".*generated by Slic3r"
        self.code_map = {
            re.compile(self.version_regex): self._check_version
        }

    def _check_version(self, input_line):
        regex = "%s ([0-9]\.[0-9]\.[0-9])" % (self.version_regex)
        match = re.match(regex, input_line)
        if not match.group(1) == self.version:
            raise makerbot_driver.GcodeProcessors.VersionError
        return input_line
