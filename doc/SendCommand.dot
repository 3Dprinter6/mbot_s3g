// vim:ai:et:fenc=utf-8:ff=unix:sw=4:ts=4:

digraph
{
  "BUILD PACKET" -> "SET RETRY_COUNT=0";
  "SET RETRY_COUNT=0" -> "INIT DECODER";
  "INIT DECODER" -> "SET START_TIME=NOW";
  "SET START_TIME=NOW" -> "DECODER_STATE=PAYLOAD_READY?";
  "DECODER_STATE=PAYLOAD_READY?" [shape=diamond];
  "DECODER_STATE=PAYLOAD_READY?" -> "TIME>START_TIME+TIMEOUT_LENGTH?" [label="no"];
  "DECODER_STATE=PAYLOAD_READY?" -> "FINISHED" [label="yes"];
  "TIME>START_TIME+TIMEOUT_LENGTH?" [shape=diamond];
  "TIME>START_TIME+TIMEOUT_LENGTH?" -> "READ BYTE" [label="no"];
  "TIME>START_TIME+TIMEOUT_LENGTH?" -> "ERROR" [label="yes"];
  "READ BYTE" -> "RECEIVED BYTE?";
  "RECEIVED BYTE?" [shape=diamond];
  "RECEIVED BYTE?" -> "TIME>START_TIME+TIMEOUT_LENGTH?" [label="no"];
  "RECEIVED BYTE?" -> "UPDATE DECODER_STATE" [label="yes"];
  "UPDATE DECODER_STATE" -> "DECODER ERROR?";
  "DECODER ERROR?" [shape=diamond];
  "DECODER ERROR?" -> "ERROR" [label="yes"];
  "DECODER ERROR?" -> "DECODER_STATE=PAYLOAD_READY?" [label="no"];
  "ERROR" -> "INCREMENT RETRY_COUNT";
  "INCREMENT RETRY_COUNT" -> "RETRY_COUNT<5?";
  "RETRY_COUNT<5?" [shape=diamond];
  "RETRY_COUNT<5?" -> "FAILURE" [label="no"];
  "RETRY_COUNT<5?" -> "INIT DECODER" [label="yes"];
}
